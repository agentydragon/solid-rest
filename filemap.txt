/*
  * all http and websocket handling is in server/src/index
  * all storage handling is in the storage plugin
  * all communication with the storage plugin is in core/performRequestedMethod
*/


data-kitchen/
  config.ttl
  kitchen-start.js
  src/
    index.js
  templates
    data-kitchen.tmpl
    fileManage.tmpl    
    fileBrowser.tmpl
    httpBrowser.tmpl
    sshBrowser.tmpl
    solid-login.tmpl
    ssh-login.tmpl
  myPod/
    assets/
      html/
        data-kitchen.html
      css/
      data-kitchen.css
      data-kitchen.js
      mashlib.html
      icons/
        *.ico

@solid-rest/
  server/src/index.js
  core/src/index.js
  file/src/index.js
  ssh/src/index.js
  bfs/src/index.js

    profile/
    settings/
    .well-known/
    favicon.ico
    inbox/
    private/
    public/


Information has become centralized and out of our control
Access tools have become de-centralized and out of our control



centralized tools for decentralized information

One of the wonderful things about the first web was that we could all of a sudden use a single toole to look at many kinds of resources.  The web browser 



The **Solid DataKitchen Server** (SDS) is a light-weight personal http server meant to be run as localhost and to provide a Solid interface to a variety of non-Solid backends.  It is single user and private. It does not require certificates, configuration, or login.  It runs on Linux, Mac, Windows, and probably elsewhere.

Currently SDS serves the local file system and ssh hosts with bash-like shells.  It has a very simple plugin architecture that allows new backends to be supported.  It also supports server-side tool plugins such as an RSS proxy.  

Permissions on the server are based the permissions of whomever runs it.  So it will provide access to everything on your local file system that you as a user have access to and forbid access to, for example, resources that require sudo (unless you start it as root).

When accessed via /data-kitchen, it provides an enhanced SolidOS databrowser interface that supports accessing resources on multiple information spaces including CSS-style and NSS-style servers as well as the natively support personal backends.  When accessed directly, outside of the DataKitchen interface, it sends the same responses as any spec-compliant Solid-Server and is thus suitable for testing.


If current user has no inbox, it should be assumed that they are in a private pod such as DataKitchen provides - one that does not support incoming messages.  This should be formalized in mashlib by creating an audience that does not load panes/icons for collaboration tools (chat and inbox and ...?).


@foo/
  fooA/
  fooB/
  fooC/
  fooCore/

fooA depends on fooB and fooC and fooCore
fooB and fooC depend on fooCore

users might want to install fooA (everything)
or only install fooB or fooC


Solid
  * linked data
  * a browser that reads and writes
  * privacy

name "Jeff";
port 9119;
storage <file:///home/jeff/Dropbox/>.  

.docView
,doc

URLs to pod-resources (profile, preferences, etc.) are located in installDir/myPod but are still addressed as if they were at the root of your computer (/profile/card, etc.). All other  URLs 

Solid-Rest-Server is a lightweight personal server meant to provide access to your local file system and cloud-based storage under your control.  Since you will run the server and it doesn't accept outside connectionsIt runs on http so does not require certifications.  It is single user, so there is no login.  It does not accept requests from anywhere but 127.0.0.1 so it does not expose your data.  

@solid-rest
  core
  server
  file
  ssh
  mem
  bfs

@solid-rest/core does not depend on any of the @solid-rest packages
each @solid-rest plugin depends on @solid-rest-core
@solid-rest/server depends on all of the @solid-rest packages

server depends on 


solid-rest/
  README.md
  Plugin-Developer.md
  tests/
    all.js
    shouldSucceed.js
    shouldFail.js
  src/
    index.js
    handleRequest.js
    examineRequest.js
    examineRequestedItem.js
    performRequestedMethod.js
    handleResponse.js
    utils/
      performPatch.js
      containerToTurtle.js
      utils.js
      createServerlessPod.js
  plugins/
    solid-rest-file/
      README.md
      src/
       index.js
    solid-rest-mem/
      README.md
      src/
        index.js
    solid-rest-ssh/
      README.md
      src/
        index.js
    solid-rest-browser/
      README.md
      src/
        index.js
  
